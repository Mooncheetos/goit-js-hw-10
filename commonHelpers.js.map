{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// Объявляем глобальные переменные\nlet countdownInterval; // Интервал обратного отсчета\nlet userSelectedDate; // Выбранная пользователем дата\n\n// Инициализация flatpickr для поля выбора даты и времени\nconst dateTimePicker = flatpickr(\"#datetime-picker\", {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates[0];\n        validateSelectedDate(userSelectedDate);\n    },\n});\n\n// Проверка выбранной пользователем даты на корректность\nfunction validateSelectedDate(selectedDate) {\n    const currentDate = new Date();\n    const startTimerBtn = document.getElementById('start-timer');\n    if (selectedDate < currentDate) {\n        startTimerBtn.disabled = true;\n        iziToast.error({\n            title: 'Error',\n            message: 'Please choose a date in the future',\n        });\n    } else {\n        startTimerBtn.disabled = false;\n    }\n}\n\n// Назначение обработчика события на кнопку \"Start\"\ndocument.getElementById('start-timer').addEventListener('click', () => {\n    const selectedDate = userSelectedDate;\n    const targetDate = new Date(selectedDate).getTime();\n\n    // Отключаем поле выбора даты и кнопку \"Start\"\n    dateTimePicker.disabled = true;\n    document.getElementById('start-timer').disabled = true;\n\n    // Запускаем интервал обратного отсчета\n    countdownInterval = setInterval(updateTimerUI, 1000, targetDate);\n});\n\n// Функция обновления интерфейса таймера\nfunction updateTimerUI(targetDate) {\n    const currentDate = new Date().getTime();\n    const timeDifference = targetDate - currentDate;\n\n    // Проверяем, закончился ли таймер\n    if (timeDifference <= 0) {\n        clearInterval(countdownInterval);\n        updateTimerDisplay(0, 0, 0, 0);\n        iziToast.success({\n            title: 'Success',\n            message: 'Countdown finished!',\n        });\n        return;\n    }\n\n    // Конвертируем разницу времени в формат чч:мм:сс:мс и обновляем интерфейс\n    const { days, hours, minutes, seconds } = convertMs(timeDifference);\n    updateTimerDisplay(days, hours, minutes, seconds);\n}\n\n// Функция обновления отображения таймера\nfunction updateTimerDisplay(days, hours, minutes, seconds) {\n    const timerFields = document.querySelectorAll('.timer [class=\"value\"]');\n    timerFields[0].textContent = addLeadingZero(days);\n    timerFields[1].textContent = addLeadingZero(hours);\n    timerFields[2].textContent = addLeadingZero(minutes);\n    timerFields[3].textContent = addLeadingZero(seconds);\n}\n\n// Функция добавления ведущего нуля к числу, если оно меньше 10\nfunction addLeadingZero(value) {\n    return value < 10 ? `0${value}` : value;\n}\n\n// Функция конвертации миллисекунд в дни, часы, минуты и секунды\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\n// Устанавливаем кнопку \"Start\" в неактивное состояние при загрузке страницы\nwindow.addEventListener('load', () => {\n    const startTimerBtn = document.getElementById('start-timer');\n    startTimerBtn.disabled = true;\n});"],"names":["countdownInterval","userSelectedDate","dateTimePicker","flatpickr","selectedDates","validateSelectedDate","selectedDate","currentDate","startTimerBtn","iziToast","targetDate","updateTimerUI","timeDifference","updateTimerDisplay","days","hours","minutes","seconds","convertMs","timerFields","addLeadingZero","value","ms"],"mappings":"2FAMA,IAAIA,EACAC,EAGJ,MAAMC,EAAiBC,EAAU,mBAAoB,CACjD,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnBH,EAAmBG,EAAc,GACjCC,EAAqBJ,CAAgB,CACxC,CACL,CAAC,EAGD,SAASI,EAAqBC,EAAc,CACxC,MAAMC,EAAc,IAAI,KAClBC,EAAgB,SAAS,eAAe,aAAa,EACvDF,EAAeC,GACfC,EAAc,SAAW,GACzBC,EAAS,MAAM,CACX,MAAO,QACP,QAAS,oCACrB,CAAS,GAEDD,EAAc,SAAW,EAEjC,CAGA,SAAS,eAAe,aAAa,EAAE,iBAAiB,QAAS,IAAM,CACnE,MAAMF,EAAeL,EACfS,EAAa,IAAI,KAAKJ,CAAY,EAAE,QAAO,EAGjDJ,EAAe,SAAW,GAC1B,SAAS,eAAe,aAAa,EAAE,SAAW,GAGlDF,EAAoB,YAAYW,EAAe,IAAMD,CAAU,CACnE,CAAC,EAGD,SAASC,EAAcD,EAAY,CAC/B,MAAMH,EAAc,IAAI,KAAM,EAAC,QAAO,EAChCK,EAAiBF,EAAaH,EAGpC,GAAIK,GAAkB,EAAG,CACrB,cAAcZ,CAAiB,EAC/Ba,EAAmB,EAAG,EAAG,EAAG,CAAC,EAC7BJ,EAAS,QAAQ,CACb,MAAO,UACP,QAAS,qBACrB,CAAS,EACD,MACH,CAGD,KAAM,CAAE,KAAAK,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAc,EAClEC,EAAmBC,EAAMC,EAAOC,EAASC,CAAO,CACpD,CAGA,SAASJ,EAAmBC,EAAMC,EAAOC,EAASC,EAAS,CACvD,MAAME,EAAc,SAAS,iBAAiB,wBAAwB,EACtEA,EAAY,GAAG,YAAcC,EAAeN,CAAI,EAChDK,EAAY,GAAG,YAAcC,EAAeL,CAAK,EACjDI,EAAY,GAAG,YAAcC,EAAeJ,CAAO,EACnDG,EAAY,GAAG,YAAcC,EAAeH,CAAO,CACvD,CAGA,SAASG,EAAeC,EAAO,CAC3B,OAAOA,EAAQ,GAAK,IAAIA,IAAUA,CACtC,CAGA,SAASH,EAAUI,EAAI,CAMnB,MAAMR,EAAO,KAAK,MAAMQ,EAAK,KAAG,EAC1BP,EAAQ,KAAK,MAAOO,EAAK,MAAO,IAAI,EACpCN,EAAU,KAAK,MAAQM,EAAK,MAAO,KAAQ,GAAM,EACjDL,EAAU,KAAK,MAASK,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAR,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAGA,OAAO,iBAAiB,OAAQ,IAAM,CAClC,MAAMT,EAAgB,SAAS,eAAe,aAAa,EAC3DA,EAAc,SAAW,EAC7B,CAAC"}